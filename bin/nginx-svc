#!/bin/bash
################################################################################
#          FILE: nginx-svc
#         USAGE: 
#   DESCRIPTION: this script is used to manage the nginx 
#       OPTIONS: --- 
#          BUGS: --- 
#         NOTES: --- 
#        AUTHOR: niuzhiqiang, niuzhiqiang90@foxmail.com
#  ORGANIZATION: 
#       CREATED: Sun 27 Aug 2017 08:36:17 PM CST
#      REVISION: 1.0.0
################################################################################

set -o nounset
declare -r nginx_home="/usr/local/nginx"
declare -r nginx_cmd="./sbin/nginx"
declare -r nginx_conf="./conf/nginx.conf"
declare -r nginx_cache_home="/home/${LOGNAME}/tmp/nginx/cache"
declare -r nginx_temp_home="/home/${LOGNAME}/tmp/nginx/tmp"
declare -r php_home="/usr/local/php"
declare -r php_fpm_cmd="${php_home}/sbin/php-fpm"
declare -r auto_gen_dir="${nginx_home}/conf/auto_gen"

################################################################################
# start nginx
################################################################################
function start_nginx() 
{
    local nginx_pid=$(get_nginx_pid)
    if [[ $nginx_pid -ne 0 ]]; then
        echo "nginx already running, PID=${nginx_pid}"
        exit
    fi

    [[ -f ${php_fpm_cmd} ]] && start_php_fpm
    echo "Starting nginx ..."
    sudo /bin/rm -rf ${nginx_cache_home}/*
    [[ -d ${auto_gen_dir} ]] && init_autogen
    pushd ${nginx_home} > /dev/null
    sudo ${nginx_cmd} -c ${nginx_conf} &
    sleep 3
    local nginx_pid=$(get_nginx_pid)
    if [[ $nginx_pid -ne 0 ]]; then
        echo "nginx started, PID=${nginx_pid}"
    else
        echo "nginx start failed"
    fi
    popd > /dev/null
}

################################################################################
# stop nginx
################################################################################
function stop_nginx() 
{
    local nginx_pid=$(get_nginx_pid)
    if [[ $nginx_pid -ne 0 ]]; then
        sudo kill ${nginx_pid}
        echo "quit nginx ..." 
        stop_php_fpm
    else
        echo "nginx stopped"
    fi
}

################################################################################
# reload nginx
################################################################################
function reload_nginx()
{
    echo "Reloading nginx ..."
    pushd ${nginx_home} > /dev/null
    sudo ${nginx_cmd} -s reload 
    [[ $? -eq 0 ]] && echo "ok" || echo "failed"
    popd > /dev/null
}

################################################################################
# clean up the nginx temp files
################################################################################
function clean_temp_files()
{
    echo "Cleaning nginx temp files ..."
    sudo /bin/rm -rf ${nginx_cache_home}/*
    sudo /bin/rm -rf ${nginx_temp_home}/*
    [[ $? -eq 0 ]] && echo "ok" || echo "failed"
}

################################################################################
# init auto gen
################################################################################
function init_autogen()
{
    pushd ${nginx_auto_gen} > /dev/null
    for auto_gen_conf_file in $(ls ./); do
        /bin/echo > ${auto_gen_conf_file}
    done
    popd > /dev/null
}

################################################################################
# get the nginx pid
################################################################################
function get_nginx_pid()
{
    local nginx_pid=$(ps -ef | grep $nginx_cmd | grep -v grep | awk '{print $2}')
    if [[ ${nginx_pid} ]]; then
        echo ${nginx_pid}
        return $nginx_pid
    fi
    return 0
}

################################################################################
# get the nginx running status
################################################################################
function get_nginx_status()
{
    local nginx_pid=$(get_nginx_pid)
    if [[ ${nginx_pid} -ne 0 ]]; then
        echo "nginx is running, PID=${nginx_pid}"
    else
        echo "nginx is stopped"
    fi
}

################################################################################
# start php fpm
################################################################################
function start_php_fpm()
{
    if [[ -f ${php_fpm_cmd} ]]; then
        echo "Starting php-fpm ..."
        sudo ${php_fpm_cmd}
    fi
}

################################################################################
# stop php fpm
################################################################################
function stop_php_fpm()
{
    if [[ -f ${php_fpm_cmd} ]]; then
        echo "Stopping php-fpm"
        sudo killall php-fpm
    fi
}

################################################################################
# print the usage
################################################################################
function usage()
{
    echo "Usage: $0 {start|stop|restart|reload|status|clean}"
    echo "1. run \`$0 start\`: start the nginx"
    echo "2. run \`$0 stop\`: stop the nginx"
    echo "3. run \`$0 restart\`: restart the nginx"
    echo "4. run \`$0 reload\`: reload the nginx"
    echo "5. run \`$0 status\`: get the nginx status"
    echo "6. run \`$0 clean\`: clean the nginx temp files"
    exit 1
}

################################################################################
# main logic
################################################################################
function main()
{   
    if [[ $# -ne 1 ]]; then
        usage
    fi

    case "$1" in
        start)
            start_nginx
            ;;
        stop)
            stop_nginx
            ;;
        restart)
            stop_nginx
            sleep 2
            start_nginx
            ;;
        reload)
            reload_nginx
            ;;
        clean)
            clean_temp_files
            ;;
        status)
            get_nginx_status
            ;;
        *)
            usage
            ;;
    esac
}

main $@

